{"version":3,"sources":["sketch.ts","Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sketch","p","videoImage","theShader","setup","createCanvas","WEBGL","createCapture","VIDEO","noStroke","createShader","draw","image","shader","quad","setUniform","frameCount","Canvas","ref","useRef","useEffect","current","querySelector","setAttribute","P5","remove","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAqIeA,EA9BA,SAACC,GACd,IAAIC,EAAgC,KAChCC,EAAiB,KAErBF,EAAEG,MAAQ,WACRH,EAAEI,aA1GQ,IACC,IAyGmBJ,EAAEK,OAChCJ,EAAaD,EAAEM,cAAcN,EAAEO,OAE/BP,EAAEQ,WACFN,EAAYF,EAAES,aA1FZ,wKAYA,09DAmFJT,EAAEU,KAAO,WACY,OAAfT,GACFD,EAAEW,MAAMV,GAAY,KAAc,IAAe,EAAG,GAEtDD,EAAEY,OAAOV,GACTF,EAAEa,MAAM,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAChCX,EAAUY,WAAW,aAAc,CAzHzB,IACC,MAyHXZ,EAAUY,WAAW,WAAYb,GACjCC,EAAUY,WAAW,OAAuB,GAAfd,EAAEe,cC1GpBC,EAfU,WACvB,IAAMC,EAAMC,iBAAuB,MAWnC,OAVAC,qBAAU,WAAO,IAAD,EACd,GAAoB,OAAhBF,EAAIG,QAAR,CAGA,UAAAH,EAAIG,QAAQC,cAAc,iBAA1B,SAAqCC,aAAa,QAAS,UAC3D,IAAMtB,EAAI,IAAIuB,IAAGxB,EAAQkB,EAAIG,SAC7B,OAAO,WACLpB,EAAEwB,cAGC,qBAAKP,IAAKA,EAAKQ,MAAO,MCLhBC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCQSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9083fdf.chunk.js","sourcesContent":["import P5 from \"p5\";\n\nconst width = 640;\nconst height = 420;\n// const vs = `\n//   attribute vec3 aPosition;\n//   void main() {\n//      vec4 positionVec4 = vec4(aPosition, 1.0);\n\n//      gl_Position = positionVec4;\n// }\n// `;\n\n// const fs = `\n// uniform vec2 u_resolution;\n// uniform float u_time;\n// void main() {\n//     vec2 st = gl_FragCoord.xy/u_resolution.xy;\n//     gl_FragColor=vec4(st.x,st.y,0.0,1.0);\n// }\n// `;\n\nlet vs = `\n  precision highp float;\n\n  attribute vec3 aPosition;\n\n  void main() {\n     vec4 positionVec4 = vec4(aPosition, 1.0);\n\n     gl_Position = positionVec4;\n}\n`;\n\nlet fs = `\n  precision highp float;\n  uniform vec2 resolution;\n  uniform sampler2D uSampler;\n  uniform float time;\n\n  float random(float n) {\n    return fract(sin(n*318.154121)*31.134131);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n  void main() {\n\n    vec2 texUv = gl_FragCoord.xy;\n    texUv = resolution.x/resolution.y* texUv;\n    texUv =  (gl_FragCoord.xy - gl_FragCoord.xy*.5) / resolution;\n    texUv.y = 1.-texUv.y;\n\n    // texUv = fract(texUv * 4.);\n\n    vec2 texUv2 = texUv;\n    vec2 texUv3 = texUv;\n\n    float xxx = fract(time) * 100.;\n    float xNoise = noise(vec3(texUv.x * xxx, texUv.y, time));\n    xNoise = step(.4, xNoise) *.1;\n    // texUv.x -= xNoise;\n\n    float r = texture2D(uSampler, texUv - vec2(0., xNoise * .5)).r;\n    float g = texture2D(uSampler, texUv - vec2(0., xNoise * .24)).g;\n    float b = texture2D(uSampler, texUv - vec2(0., xNoise * .18)).b;\n\n    b += .3;\n    // g = 1. - g;\n\n    // float xNoise2 = noise(vec3(.1, texUv.y*150., time)).1;\n    // texUv.x -= xNoise;\n    // float g = texture2D(uSampler, texUv2).y;\n    vec4 color = pow(vec4(r, g, b, 1.), vec4(1.2,\n      1.1,\n      4.8,\n      1.));\n    vec4 color2 = pow(vec4(r, g, b, 1.), vec4(1.2, 1.1, 4.8, 1.));\n    float rrr = color2.x + color2.y + color2.z;\n    rrr /= 3.5;\n\n    gl_FragColor = color;\n}\n`;\n\nconst sketch = (p: P5) => {\n  let videoImage: P5.Element | null = null;\n  let theShader: any = null;\n\n  p.setup = () => {\n    p.createCanvas(width, height, p.WEBGL);\n    videoImage = p.createCapture(p.VIDEO);\n\n    p.noStroke();\n    theShader = p.createShader(vs, fs);\n\n    // p.shader(theShader);\n  };\n\n  p.draw = () => {\n    if (videoImage !== null) {\n      p.image(videoImage, -width * 0.5, -height * 0.5, 0, 0);\n    }\n    p.shader(theShader);\n    p.quad(-1, -1, -1, 1, 1, 1, 1, -1);\n    theShader.setUniform(\"resolution\", [width, height]);\n    theShader.setUniform(\"uSampler\", videoImage);\n    theShader.setUniform(\"time\", p.frameCount * 0.1);\n\n    // theShader.setUniform(\"u_time\", p.frameCount * 0.01);\n    // p.shader(theShader);\n    // p.resetShader();\n  };\n};\n\nexport default sketch;\n","import React, { useEffect, useRef } from \"react\";\nimport P5 from \"p5\";\n\nimport sketch from \"./sketch\";\nconst Canvas: React.FC = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current === null) {\n      return;\n    }\n    ref.current.querySelector(\"canvas\")?.setAttribute(\"class\", \"canvas\");\n    const p = new P5(sketch, ref.current);\n    return () => {\n      p.remove();\n    };\n  });\n  return <div ref={ref} style={{}}></div>;\n};\n\nexport default Canvas;\n","import React from \"react\";\nimport Canvas from \"./Canvas\";\n\nfunction App() {\n  return (\n    <div>\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}